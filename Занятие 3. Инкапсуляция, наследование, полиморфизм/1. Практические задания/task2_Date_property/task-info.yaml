type: theory
files:
- name: main.py
  visible: true
  placeholders:
  - offset: 424
    length: 84
    placeholder_text: |-
      # TODO какой декоратор следует применить?
          def is_leap_year(self, year: int) -> bool:
    initial_state:
      length: 88
      offset: 424
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      # TODO какой декоратор следует применить?
          def is_leap_year(self, year: int) -> bool:
  - offset: 569
    length: 50
    placeholder_text: "...  # TODO записать условие проверки високосного года"
    initial_state:
      length: 54
      offset: 573
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "...  # TODO записать условие проверки високосного\
      \ года"
  - offset: 769
    length: 49
    placeholder_text: "...  # TODO вернуть количество дней указанного месяца"
    initial_state:
      length: 53
      offset: 777
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "...  # TODO вернуть количество дней указанного мес\
      яца"
  - offset: 951
    length: 84
    placeholder_text: "...  # TODO если указанный набор день, месяц и год неверны\
      , то вызвать ошибку ValueError"
    initial_state:
      length: 88
      offset: 963
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: "...  # TODO если указанный набор день, месяц и год\
      \ неверны, то вызвать ошибку ValueError"
  - offset: 1041
    length: 35
    placeholder_text: '# TODO записать getter и setter для дня'
    initial_state:
      length: 39
      offset: 1057
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO записать getter и setter для дня'
  - offset: 1082
    length: 38
    placeholder_text: '# TODO записать getter и setter для месяца'
    initial_state:
      length: 42
      offset: 1102
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO записать getter и setter для месяца'
  - offset: 1126
    length: 36
    placeholder_text: '# TODO записать getter и setter для года'
    initial_state:
      length: 40
      offset: 1150
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: '# TODO записать getter и setter для года'
  text: |
    class Date:
        """Класс для работы с датами"""
        DAY_OF_MONTH = (
            (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),  # обычный год
            (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)  # високосный
        )

        def __init__(self, day: int, month: int, year: int):
            self._day = day
            self._month = month
            self._year = year

            self.is_valid_date(self._day, self._month, self._year)

        # TODO какой декоратор следует применить?
        def is_leap_year(self, year: int) -> bool:
            """Проверяет, является ли год високосным"""
            ...  # TODO записать условие проверки високосного года

        def get_max_day(self, month: int, year: int) -> int:
            """Возвращает максимальное количество дней в месяце для указанного года"""
            ...  # TODO вернуть количество дней указанного месяца

        def is_valid_date(self, day: int, month: int, year: int) -> None:
            """Проверяет, является ли дата корректной"""
            ...  # TODO если указанный набор день, месяц и год неверны, то вызвать ошибку ValueError

        # TODO записать getter и setter для дня

        # TODO записать getter и setter для месяца

        # TODO записать getter и setter для года
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
status: Solved
record: -1
post_submission_on_open: true
